# Написать следующую структуру классов: 

# Есть класс Person, описывающий человека. У человека есть свойства: 
# 	name: str - имя 
# 	id: int – id 

# Есть класс Room, который описывает помещение. Оно имеет свойство: 
# 	name: str - название помещения. 
# 	Также у любого помещения есть скрытое свойство: 
# 	users: list[int], которое хранит список id всех людей, у которых есть допуск к этому помещению.  
# 	Редактируется этот список только с помощью внешних методов 
# 	add(person: Person) -> None и remove(person: Person) -> None, 
#     которые добавляют и удаляют людей в пользователи комнаты соответственно. 

# Использовать паттерн Заместитель (Proxy) и написать класс RoomAccess 
# со статическим 	методом get(person: Person, room: Room) -> None, 
# который выводит сообщение формата 
# “пользователю {name} [не] предоставлен доступ в комнату {room name}”. 


from abc import ABC


class Person():
    name: str
    id: int

    def __init__(self, name, id):
        self.name = name
        self.id = id


class Room():
    name: str
    _users: list[int]

    def __init__(self, name, _users):
        self.name = name
        self._users = _users

    def add(person: Person) -> None:
        Room._users.append(Person.id)

    def remove(person: Person) -> None:
        Room._users.remove(Person.id)


class RoomAccess:

    @staticmethod
    def get(person: Person, room: Room) -> None:
        if set(person.id) & set (room.name):
            return f'пользователю {person.id} предоставлен доступ в комнату {room.name}'
        return f'пользователю {person.id} НЕ предоставлен доступ в комнату {room._users}'


ivan = Person('иван', 1)
petr = Person('пётр', 2)
andrey = Person('андрей', 3)

stolovaya = Room('столовая', [])
stolovaya.add(ivan.id)
stolovaya.add(petr.id)
stolovaya.remove(petr.id)

print(stolovaya._users)

cabinet = Room('класс', [])
cabinet.add(andrey.id)

print(cabinet._users)

print(RoomAccess.get(ivan.id, stolovaya.name))
